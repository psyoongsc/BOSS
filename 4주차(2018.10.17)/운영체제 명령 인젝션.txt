https://kin.naver.com/qna/detail.nhn?d1id=1&dirId=1040204&docId=69713751&qb=7Y6EIGNnaQ==&enc=utf8&section=kin&rank=1&search_sort=0&spq=0&pid=T8NtIlpySEKssbVP5nKssssssdV-517796&sid=BtVV9/XCIcey95EUevSeVQ%3D%3D

[운영체제 명령 인젝션]

<백엔드 컴포넌트 공격>
웹 에플리케이션은 웹 서버와 메일서버 등의 네트워크 리소스, 파일 시스템과 인터페이스 등의 로컬 리소스를 포함한 백엔드 비즈니스 중요 자원에 인터넷을 통해 수시로 연결한다.
또한 대부부느이 경우 에플리케이션 서버는 백엔드 컴포넌트의 임의 접근 통제 계층으로 작동한다.
백엔드 컴포넌트와의 통신을 임의로 가능하게 하는 공격이 성공하면 잠재적으로 웹 애플리케이션의 전체 접고느 통제 모델을 침해해 중요 데이터와 기능에 대한 무단 접근을 허용하게 할 수 있다.

데이터가 하나의 컴포넌트에서 다른 컴포넌트로 전달될 때 서로 다른 API와 인터페이스 집합에 의해 해석된다.
코어 애플리케이션에서 안전하다고 판단되는 데이터가 다양한 인코딩을 지원하고 이스케이프 문자, 필드 구분자, 종결 문자를 지원하는 컴포넌트에서는 매우 위험할 수 있다.
또한 데이터를 전달받은 컴포넌트는 애플리케이션이 정상적으로 실행된 것보다 더 많은 기능을 갖고 있을 수 있다.
인젝션 취약점을 악용하는 공격자는 쉽게 애플리케이션 접근 통제를 무력화할 수 있다.
공격자는 백엔드 컴포넌트가 지원하는 추가 기능을 악용해 조직 인프라의 중요한 부분을 손상시킬 수 있다.

<정의 및 개념>
대부분의 웹 서버 플랫폼은 서버의 운영체제에서 어떤 요청에 대한 응답을 수행하기 위해 내장된 API를 갖고 있다.
개발자들은 이런 유용한 API들을 이용해서 파일시스템에 접근하거나 다른 프로세스와 통신하거나 안전한 방식으로 네트워크 통신을 할 수 있다.
더욱이 개발자들은 서버상에서 직접 운영체제 명령을 실행할 수 있는 좀 더 강력한 기술을 이용해야 하는 경우도 많다.
이런 기술을 이용해서 특정 문제를 해결할 수도 있습니다.
그러나 애플리케이션이 사용자가 입력하는 부분에 운영체제 명령을 실행할 수 있게 통과시켜 버린다면 명령 인젝션 취약점이 생기고, 공격자는 해당 입력 부분에 특정 시스템 명령을 삼입해 원하는 결과를 얻을 수 있게 될것이다.

이런 공격에는 PHP에서의 exec, ASP에서의 wscript.shell 같은 운영체제 명령을 사용할 수 있는 함수가 주로 사용되고, 이런 명령은 시스템상에서 어떤 제약도 받지 않고 수행된다.
예를 들어, 디렉토리 목록이나 내용을 볼 수 있게 해놓은 API들이 있다면 공격자는 이런 API들을 악용해서 임의의 파일을 만들거나 다른 프로그램들을 실행하게 만들 수 있다.
삽입된 명령은 에플리케이션의 보안환경 속에서도 정상적으로 실행되며, 가끔 이런 명령을 통해 공격자는 전체 서버를 장악할 수 있는 강력한 권한을 가질 수 있게 될 것이다.

이런 취약점은 기업 서버나 방화벽, 프린터, 라우터 같은 장비를 관리하기 위한 애플리케이션에서 주로 발생한다.

<실습>
ppt참고

<대응 방안>
일반적으로 운영체제 명령 인젝션 취약점을 막는 가장 효과적인 방법은 애플리케이션이 운영체제로부터 어떤 명령을 직접적으로 호출하지 못하게 모두 막는 것이다.
가능하다면 사용자가 입력하는 값에 대해 화이트리스트를 이용해서 해당 목록에 없는 값에 대해서는 엄격하게 제어해야 한다.
반면 입력을 알파벳이나 숫자와 같이 매우 좁은 영역에 대해서만 제한할 수도 있다.

추가적인 보호 계층에 통해 애플리케이션은 명령 연결이나 재전송을 지원하는 셸 해석기에 명령 문자열을 전달하는 것보다 이름과 커맨드 라인 변수를 통해 특정한 프로세스를 실행하는 API를 사용하게 해야 한다.
예를 들어, 자바 Runtime.exec와 ASP 닷넷 Process.start는 셸 해석기를 지원하지 않으며, 명령은 오직 개발자에 의해서만 수행될 것이라고 확신하는 데 사용된다.